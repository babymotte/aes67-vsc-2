/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_AES67_VSC_2__
#define __RUST_AES67_VSC_2__
#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** <No documentation available> */
typedef struct Aes67VscReceiverConfig {
    /** <No documentation available> */
    char const * id;

    /** <No documentation available> */
    char const * sdp;

    /** <No documentation available> */
    float link_offset;

    /** <No documentation available> */
    float buffer_time;

    /** <No documentation available> */
    uint32_t const * delay_calculation_interval;

    /** <No documentation available> */
    char const * interface_ip;
} Aes67VscReceiverConfig_t;

/** \brief
 *  Create a new AES67 receiver
 *  * `id` - A string pointer to the receiver ID, which must be unique within this process
 *  * `audio_format` - The receiver's audio format
 */
uint8_t
aes67_vsc_create_receiver (
    int32_t const * vsc,
    char const * id,
    Aes67VscReceiverConfig_t const * config);

/** \brief
 *  Create a new virtual sound card.
 *  The sound card can then be used to create senders and receivers and get stats and monitoring.
 *
 *  While technically possible, it is generally not recommended to create more than one sound card
 *  at the same time to avoid allocating resources unnecessarily.
 */
int32_t
aes67_vsc_create_vsc (void);

/** \brief
 *  Destroy an existing AES67 receiver. Destroying a receiver will stop it from receiving any
 *  more audio packets and filling the assigned buffer. It will also de-allocate any memory the
 *  receiver has allocated during its creation.
 *
 *  * `vsc` - the virtual soundcard on which to destroy the receiver
 *  * `id` - the ID of the receiver to be destroyed
 */
uint8_t
aes67_vsc_destroy_receiver (
    int32_t const * vsc,
    char const * id);

/** \brief
 *  Destroy a virtual sound card. This will stop all senders and receivers that were created on
 *  this sound card and de-allocate all memory that was allocated by it.
 */
uint8_t
aes67_vsc_destroy_vsc (
    int32_t const * vsc);

/** \brief
 *  Initialize the VSC subsystem. This only needs to be called once, any subsequent calls will be ignored.
 */
uint8_t
aes67_vsc_init (void);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_AES67_VSC_2__ */
