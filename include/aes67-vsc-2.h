/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_AES67_VSC_2__
#define __RUST_AES67_VSC_2__

static const unsigned int AES_VSC_OK = 0x00;
static const unsigned int AES_VSC_ERROR_NOT_INITIALIZED = 0x01;
static const unsigned int AES_VSC_ERROR_ALREADY_INITIALIZED = 0x02;
static const unsigned int AES_VSC_ERROR_UNSUPPORTED_BIT_DEPTH = 0x03;
static const unsigned int AES_VSC_ERROR_UNSUPPORTED_SAMPLE_RATE = 0x04;
static const unsigned int AES_VSC_ERROR_VSC_NOT_CREATED = 0x05;
static const unsigned int AES_VSC_ERROR_RECEIVER_NOT_FOUND = 0x06;
static const unsigned int AES_VSC_ERROR_SENDER_NOT_FOUND = 0x07;
static const unsigned int AES_VSC_ERROR_INVALID_CHANNEL = 0x08;
static const unsigned int AES_VSC_ERROR_RECEIVER_BUFFER_UNDERRUN = 0x09;
static const unsigned int AES_VSC_ERROR_CLOCK_SYNC_ERROR = 0x0A;
static const unsigned int AES_VSC_ERROR_RECEIVER_NOT_READY_YET = 0x0B;
static const unsigned int AES_VSC_ERROR_NO_DATA = 0x0C;

#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** <No documentation available> */
typedef struct Aes67VscReceiverConfig {
    /** <No documentation available> */
    char const * id;

    /** <No documentation available> */
    char const * sdp;

    /** <No documentation available> */
    float link_offset;

    /** <No documentation available> */
    float buffer_time;

    /** <No documentation available> */
    uint32_t const * delay_calculation_interval;

    /** <No documentation available> */
    char const * interface_ip;
} Aes67VscReceiverConfig_t;

/** \brief
 *  Create a new AES67 receiver
 *  * `id` - A string pointer to the receiver ID, which must be unique within the process (not within the virtual sound card!)
 *  * `audio_format` - The receiver's audio format
 */
int32_t
aes67_vsc_create_receiver (
    char const * receiver_name,
    Aes67VscReceiverConfig_t const * config);

/** \brief
 *  Destroy an existing AES67 receiver. Destroying a receiver will stop it from receiving any
 *  more audio packets and filling the assigned buffer. It will also de-allocate any memory the
 *  receiver has allocated during its creation.
 *
 *  * `vsc` - the virtual soundcard on which to destroy the receiver
 *  * `id` - the ID of the receiver to be destroyed
 */
uint8_t
aes67_vsc_destroy_receiver (
    uint32_t receiver_id);

/** <No documentation available> */
uint8_t
aes67_vsc_receive (
    uint32_t receiver_id,
    uint64_t playout_time,
    size_t buffer_ptr,
    size_t buffer_len);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_AES67_VSC_2__ */
